<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.community.dao.ZyCommunityInteractionDao">

    <resultMap type="com.example.community.entity.ZyCommunityInteraction" id="ZyCommunityInteractionMap">
        <result property="interactionId" column="interaction_id" jdbcType="INTEGER"/>
        <result property="communityId" column="community_id" jdbcType="INTEGER"/>
        <result property="createBy" column="create_by" jdbcType="VARCHAR"/>
        <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="delFlag" column="del_flag" jdbcType="INTEGER"/>
        <result property="remark" column="remark" jdbcType="VARCHAR"/>
        <result property="userId" column="user_id" jdbcType="INTEGER"/>
    </resultMap>

    <!-- 批量插入 -->
    <insert id="insertBatch" keyProperty="interactionId" useGeneratedKeys="true">
        insert into zy-community.zy_community_interaction(community_id, create_by, update_by, create_time, update_time,
        content, del_flag, remark, user_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.communityId}, #{entity.createBy}, #{entity.updateBy}, #{entity.createTime}, #{entity.updateTime},
            #{entity.content}, #{entity.delFlag}, #{entity.remark}, #{entity.userId})
        </foreach>
    </insert>
    <!-- 批量插入或按主键更新 -->
    <insert id="insertOrUpdateBatch" keyProperty="interactionId" useGeneratedKeys="true">
        insert into zy-community.zy_community_interaction(community_id, create_by, update_by, create_time, update_time,
        content, del_flag, remark, user_id)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.communityId}, #{entity.createBy}, #{entity.updateBy}, #{entity.createTime}, #{entity.updateTime},
            #{entity.content}, #{entity.delFlag}, #{entity.remark}, #{entity.userId})
        </foreach>
        on duplicate key update
        community_id = values(community_id) , create_by = values(create_by) , update_by = values(update_by) ,
        create_time = values(create_time) , update_time = values(update_time) , content = values(content) , del_flag =
        values(del_flag) , remark = values(remark) , user_id = values(user_id)
    </insert>

    <delete id="deleteByUserId">
       UPDATE zy_community_interaction
        LEFT JOIN zy_comment ON zy_community_interaction.interaction_id = zy_comment.interaction_id
        LEFT JOIN zy_files ON zy_community_interaction.interaction_id = zy_files.parent_id
        SET zy_community_interaction.del_flag = #{type},
        zy_comment.del_flag = #{type}
        WHERE zy_community_interaction.interaction_id = #{id};
    </delete>



    <select id="getInterCationAll" resultType="com.example.community.dto.InterCationAndOwner">
        select
        zi.interaction_id,
        zo.owner_nickname,
        zo.owner_real_name,
        zi.create_time,
        zo.owner_phone_number,
        zi.content,
        zi.community_id,
        zo.owner_portrait as ownerPortrait

        from zy_owner zo
        LEFT JOIN zy_community_interaction zi on zo.owner_id = zi.user_id
        <!--    LEFT JOIN  zy_files zf on zf.user_id = zi.user_id-->
        <where>
            zi.del_flag != 1
            <if test="interCationAndOwner.ownerNickname != null and interCationAndOwner.ownerNickname != ''">
                and zo.owner_nickname like concat('%', #{interCationAndOwner.ownerNickname}, '%')
            </if>
            <if test="interCationAndOwner.ownerRealName != null and interCationAndOwner.ownerRealName != ''">
                and zo.owner_real_name like concat('%', #{interCationAndOwner.ownerRealName}, '%')
            </if>
            <if test="interCationAndOwner.ownerPhoneNumber != null and interCationAndOwner.ownerPhoneNumber != ''">
                and zo.owner_phone_number like concat('%', #{interCationAndOwner.ownerPhoneNumber}, '%')
            </if>
            <if test="interCationAndOwner.communityId != null and interCationAndOwner.communityId != ''">
                and zi.community_id like concat('%', #{interCationAndOwner.communityId}, '%')
            </if>
        </where>
        order by zi.create_time desc
        limit #{index},#{size}
    </select>

    <select id="getCount" resultType="java.lang.Long">
        select
        count(*)
        from zy_owner zo
        LEFT JOIN zy_community_interaction zi on zo.owner_id = zi.user_id
        <where>
            zi.del_flag != 1
            <if test="ownerNickname != null and ownerNickname != ''">
                and zo.owner_nickname like concat('%', #{ownerNickname}, '%')
            </if>
            <if test="ownerRealName != null and ownerRealName != ''">
                and zo.owner_real_name like concat('%', #{ownerRealName}, '%')
            </if>
            <if test="ownerPhoneNumber != null and ownerPhoneNumber != ''">
                and zo.owner_phone_number like concat('%', #{ownerPhoneNumber}, '%')
            </if>
            <if test="communityId != null and communityId != ''">
                and zi.community_id like concat('%', #{communityId}, '%')
            </if>
        </where>
    </select>

    <select id="getInterCationList" resultType="com.example.community.dto.InterCationAndOwner">
	SELECT
    zi.interaction_id,
    zo.owner_nickname ,
    zo.owner_real_name ,
    zi.create_time ,
    zo.owner_phone_number ,
    zi.content,
    zi.community_id,
    zc.content AS commentContent,
    zco.create_time as commentCreateTime,
    zco.owner_nickname AS commentOwnerNickname,
    zc.comment_id AS commentId,
    zc.parent_id as parentId,
    zco.owner_portrait as ownerPortrait
FROM
    zy_owner zo
    LEFT JOIN zy_community_interaction zi ON zo.owner_id = zi.user_id
    LEFT JOIN zy_comment zc ON zc.interaction_id = zi.interaction_id
    LEFT JOIN zy_owner zco ON zco.owner_id = zc.user_id
WHERE
    zi.del_flag != 1 and zc.del_flag != 1 and
    zi.interaction_id = #{interactionId}

    </select>
    <select id="getUserName" resultType="java.lang.String">
        select zy_owner.owner_real_name from zy_comment left join zy_owner on zy_owner.owner_id = zy_comment.user_id  where comment_id = #{parentId}
    </select>


</mapper>

